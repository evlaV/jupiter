From 367ab2a91504853e87cbe1641470a536754a8794 Mon Sep 17 00:00:00 2001
From: David Redondo <kde@david-redondo.de>
Date: Thu, 5 Jun 2025 12:15:33 +0200
Subject: [PATCH 3/5] Move output to common

---
 common/CMakeLists.txt        |  4 +++-
 {kded => common}/output.cpp  |  7 ++++---
 {kded => common}/output.h    |  0
 common/utils.cpp             | 27 ++++++++++++++++++++++++++
 common/utils.h               |  1 +
 kded/CMakeLists.txt          |  3 ---
 kded/config.cpp              |  4 ++--
 kded/daemon.cpp              |  2 +-
 kded/device.cpp              |  2 +-
 kded/generator.cpp           | 37 ++++++------------------------------
 kded/generator.h             |  1 -
 tests/kded/CMakeLists.txt    |  2 --
 tests/kded/testgenerator.cpp |  2 +-
 13 files changed, 46 insertions(+), 46 deletions(-)
 rename {kded => common}/output.cpp (99%)
 rename {kded => common}/output.h (100%)

diff --git a/common/CMakeLists.txt b/common/CMakeLists.txt
index 9e9b49d6..f7341866 100644
--- a/common/CMakeLists.txt
+++ b/common/CMakeLists.txt
@@ -1,4 +1,6 @@
-add_library(kscreen_common OBJECT control.cpp globals.cpp orientation_sensor.cpp osdaction.cpp utils.cpp)
+add_library(kscreen_common OBJECT control.cpp globals.cpp orientation_sensor.cpp osdaction.cpp output.cpp utils.cpp)
+ecm_qt_declare_logging_category(kscreen_common HEADER kscreen_daemon_debug.h IDENTIFIER KSCREEN_KDED CATEGORY_NAME kscreen.kded DESCRIPTION "kscreen kded (kscreen)" EXPORT KSCREEN)
 set_property(TARGET kscreen_common PROPERTY POSITION_INDEPENDENT_CODE ON)
 target_link_libraries(kscreen_common PRIVATE Qt::Core Qt::Sensors KF6::Screen KF6::CoreAddons KF6::I18n)
 target_include_directories(kscreen_common PUBLIC "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/..>")
+
diff --git a/kded/output.cpp b/common/output.cpp
similarity index 99%
rename from kded/output.cpp
rename to common/output.cpp
index 460bdac5..80d47b44 100644
--- a/kded/output.cpp
+++ b/common/output.cpp
@@ -5,10 +5,9 @@
     SPDX-License-Identifier: GPL-2.0-or-later
 */
 #include "output.h"
-#include "config.h"
 
-#include "generator.h"
 #include "kscreen_daemon_debug.h"
+#include "utils.h"
 
 #include <QDir>
 #include <QFile>
@@ -18,7 +17,9 @@
 #include <QStringBuilder>
 #include <QStringList>
 
+#include <kscreen/config.h>
 #include <kscreen/edid.h>
+#include <kscreen/mode.h>
 
 QString Output::s_dirName = QStringLiteral("outputs/");
 
@@ -94,7 +95,7 @@ void Output::readInGlobalPartFromInfo(KScreen::OutputPtr output, const QVariantM
     }
     if (!matchingMode) {
         qCWarning(KSCREEN_KDED) << "\tFailed to get a preferred mode, falling back to biggest mode.";
-        matchingMode = Generator::biggestMode(output->modes());
+        matchingMode = Utils::biggestMode(output->modes());
     }
     if (!matchingMode) {
         qCWarning(KSCREEN_KDED) << "\tFailed to get biggest mode. Which means there are no modes. Turning off the screen.";
diff --git a/kded/output.h b/common/output.h
similarity index 100%
rename from kded/output.h
rename to common/output.h
diff --git a/common/utils.cpp b/common/utils.cpp
index a9eb80c5..df554b22 100644
--- a/common/utils.cpp
+++ b/common/utils.cpp
@@ -7,6 +7,7 @@
 #include "utils.h"
 
 #include <kscreen/edid.h>
+#include <kscreen/mode.h>
 
 #include <KLocalizedString>
 
@@ -48,3 +49,29 @@ QString Utils::sizeToString(const QSize &size)
 {
     return QStringLiteral("%1x%2").arg(size.width()).arg(size.height());
 }
+
+KScreen::ModePtr Utils::biggestMode(const KScreen::ModeList &modes)
+{
+    Q_ASSERT(!modes.isEmpty());
+
+    int modeArea, biggestArea = 0;
+    KScreen::ModePtr biggestMode;
+    for (const KScreen::ModePtr &mode : modes) {
+        modeArea = mode->size().width() * mode->size().height();
+        if (modeArea < biggestArea) {
+            continue;
+        }
+        if (modeArea == biggestArea && mode->refreshRate() < biggestMode->refreshRate()) {
+            continue;
+        }
+        if (modeArea == biggestArea && mode->refreshRate() > biggestMode->refreshRate()) {
+            biggestMode = mode;
+            continue;
+        }
+
+        biggestArea = modeArea;
+        biggestMode = mode;
+    }
+
+    return biggestMode;
+}
diff --git a/common/utils.h b/common/utils.h
index a0a9e55d..f0b79dce 100644
--- a/common/utils.h
+++ b/common/utils.h
@@ -18,4 +18,5 @@ QString outputName(const KScreen::Output *output, bool shouldShowSerialNumber =
 QString outputName(const KScreen::OutputPtr &output, bool shouldShowSerialNumber = false, bool shouldShowConnector = false);
 
 QString sizeToString(const QSize &size);
+KScreen::ModePtr biggestMode(const KScreen::ModeList &modes);
 }
diff --git a/kded/CMakeLists.txt b/kded/CMakeLists.txt
index ebf8b4b7..0878cc63 100644
--- a/kded/CMakeLists.txt
+++ b/kded/CMakeLists.txt
@@ -5,13 +5,10 @@ kcoreaddons_add_plugin(kscreen INSTALL_NAMESPACE "kf6/kded")
 target_sources(kscreen PRIVATE
     daemon.cpp
     config.cpp
-    output.cpp
     generator.cpp
     device.cpp
 )
 
-ecm_qt_declare_logging_category(kscreen HEADER kscreen_daemon_debug.h IDENTIFIER KSCREEN_KDED CATEGORY_NAME kscreen.kded DESCRIPTION "kscreen kded (kscreen)" EXPORT KSCREEN)
-
 qt_add_dbus_interface(dbus_SRCS
     org.freedesktop.DBus.Properties.xml
     freedesktop_interface)
diff --git a/kded/config.cpp b/kded/config.cpp
index fd858575..33e35efb 100644
--- a/kded/config.cpp
+++ b/kded/config.cpp
@@ -6,9 +6,9 @@
 */
 #include "config.h"
 #include "common/control.h"
+#include "common/kscreen_daemon_debug.h"
+#include "common/output.h"
 #include "device.h"
-#include "kscreen_daemon_debug.h"
-#include "output.h"
 
 #include <QDir>
 #include <QFile>
diff --git a/kded/daemon.cpp b/kded/daemon.cpp
index 338a4bc8..c19664f9 100644
--- a/kded/daemon.cpp
+++ b/kded/daemon.cpp
@@ -9,10 +9,10 @@
 */
 #include "daemon.h"
 
+#include "common/kscreen_daemon_debug.h"
 #include "config.h"
 #include "device.h"
 #include "generator.h"
-#include "kscreen_daemon_debug.h"
 #include "osdservice_interface.h"
 
 #include <kscreen/configmonitor.h>
diff --git a/kded/device.cpp b/kded/device.cpp
index ec528eac..72af6059 100644
--- a/kded/device.cpp
+++ b/kded/device.cpp
@@ -6,8 +6,8 @@
 */
 
 #include "device.h"
+#include "common/kscreen_daemon_debug.h"
 #include "freedesktop_interface.h"
-#include "kscreen_daemon_debug.h"
 
 Device *Device::m_instance = nullptr;
 
diff --git a/kded/generator.cpp b/kded/generator.cpp
index ca447a0d..95f9649c 100644
--- a/kded/generator.cpp
+++ b/kded/generator.cpp
@@ -8,10 +8,11 @@
 
 #include <cmath>
 
-#include "generator.h"
+#include "common/kscreen_daemon_debug.h"
+#include "common/output.h"
+#include "common/utils.h"
 #include "device.h"
-#include "kscreen_daemon_debug.h"
-#include "output.h"
+#include "generator.h"
 #include <QRect>
 
 #include <kscreen/screen.h>
@@ -317,7 +318,7 @@ void Generator::cloneScreens(const KScreen::ConfigPtr &config)
             }
             output->setEnabled(true);
             output->setPos(QPoint(0, 0));
-            const KScreen::ModePtr mode = biggestMode(output->modes());
+            const KScreen::ModePtr mode = Utils::biggestMode(output->modes());
             Q_ASSERT(mode);
             output->setCurrentModeId(mode->id());
         }
@@ -480,32 +481,6 @@ void Generator::initializeOutput(const KScreen::OutputPtr &output, KScreen::Conf
     }
 }
 
-KScreen::ModePtr Generator::biggestMode(const KScreen::ModeList &modes)
-{
-    Q_ASSERT(!modes.isEmpty());
-
-    int modeArea, biggestArea = 0;
-    KScreen::ModePtr biggestMode;
-    for (const KScreen::ModePtr &mode : modes) {
-        modeArea = mode->size().width() * mode->size().height();
-        if (modeArea < biggestArea) {
-            continue;
-        }
-        if (modeArea == biggestArea && mode->refreshRate() < biggestMode->refreshRate()) {
-            continue;
-        }
-        if (modeArea == biggestArea && mode->refreshRate() > biggestMode->refreshRate()) {
-            biggestMode = mode;
-            continue;
-        }
-
-        biggestArea = modeArea;
-        biggestMode = mode;
-    }
-
-    return biggestMode;
-}
-
 KScreen::ModePtr Generator::bestModeForSize(const KScreen::ModeList &modes, const QSize &size)
 {
     KScreen::ModePtr bestMode;
@@ -579,7 +554,7 @@ KScreen::ModePtr Generator::bestModeForOutput(const KScreen::OutputPtr &output)
         return outputMode;
     }
 
-    return biggestMode(output->modes());
+    return Utils::biggestMode(output->modes());
 }
 
 KScreen::OutputPtr Generator::biggestOutput(const KScreen::OutputList &outputs)
diff --git a/kded/generator.h b/kded/generator.h
index 0755f133..0c9702c1 100644
--- a/kded/generator.h
+++ b/kded/generator.h
@@ -42,7 +42,6 @@ public:
     void setForceDocked(bool force);
     void setForceNotLaptop(bool force);
 
-    static KScreen::ModePtr biggestMode(const KScreen::ModeList &modes);
     qreal bestScaleForOutput(const KScreen::OutputPtr &output);
 
 Q_SIGNALS:
diff --git a/tests/kded/CMakeLists.txt b/tests/kded/CMakeLists.txt
index dca74b82..3d3355fe 100644
--- a/tests/kded/CMakeLists.txt
+++ b/tests/kded/CMakeLists.txt
@@ -8,9 +8,7 @@ macro(ADD_KDED_TEST testname)
         ${CMAKE_SOURCE_DIR}/kded/generator.cpp
         ${CMAKE_SOURCE_DIR}/kded/device.cpp
         ${CMAKE_SOURCE_DIR}/kded/config.cpp
-        ${CMAKE_SOURCE_DIR}/kded/output.cpp
     )
-    ecm_qt_declare_logging_category(test_SRCS HEADER kscreen_daemon_debug.h IDENTIFIER KSCREEN_KDED CATEGORY_NAME kscreen.kded)
 
     qt_add_dbus_interface(test_SRCS
         ${CMAKE_SOURCE_DIR}/kded/org.freedesktop.DBus.Properties.xml
diff --git a/tests/kded/testgenerator.cpp b/tests/kded/testgenerator.cpp
index 40369b5d..6ced9bce 100644
--- a/tests/kded/testgenerator.cpp
+++ b/tests/kded/testgenerator.cpp
@@ -5,8 +5,8 @@
     SPDX-License-Identifier: GPL-2.0-or-later
 */
 
+#include "../../common/output.h"
 #include "../../kded/generator.h"
-#include "../../kded/output.h"
 
 #include <QObject>
 #include <QtTest>
-- 
2.43.0

