From 4ce5756a5308a74daa51fae7c1894a78fb33ace0 Mon Sep 17 00:00:00 2001
From: David Edmundson <kde@davidedmundson.co.uk>
Date: Wed, 5 Mar 2025 15:35:02 +0000
Subject: [PATCH 1/8] x11: Update XStacking order when adding override-redirect
 windows

Kwin uses it's own stacking order for managed windows and X11's stacking
order directly for unmanaged windows.

The X11 stacking order is updated only in resonse to
XCB_CONFIGURE_NOTIFY on the root window, but if this fires before the
window is mapped by kwin the window is not added to the unmanaged stack.

This can leave things out of sync when we have multiple fullscreen
unmanaged windows, which is the case of the lockscreen.

BUG: 483163
---
 autotests/integration/x11_window_test.cpp | 50 +++++++++++++++++++++++
 src/events.cpp                            |  4 +-
 src/layers.cpp                            |  9 ++--
 src/workspace.cpp                         |  1 +
 src/workspace.h                           |  2 +-
 5 files changed, 58 insertions(+), 8 deletions(-)

diff --git a/autotests/integration/x11_window_test.cpp b/autotests/integration/x11_window_test.cpp
index 4d6cc7693e..0c4771fa18 100644
--- a/autotests/integration/x11_window_test.cpp
+++ b/autotests/integration/x11_window_test.cpp
@@ -126,6 +126,8 @@ private Q_SLOTS:
     void testStackOppositeFromTool();
     void testStackOppositeNoSibling();
     void testOverrideRedirectReparent();
+    void testOverrideRedirectStackingAbove();
+    void testOverrideRedirectStackingBelow();
 };
 
 void X11WindowTest::initTestCase_data()
@@ -3514,5 +3516,53 @@ void X11WindowTest::testOverrideRedirectReparent()
     QVERIFY(!windowAddedSpy.wait(10));
 }
 
+void X11WindowTest::testOverrideRedirectStackingAbove()
+{
+    Test::XcbConnectionPtr c = Test::createX11Connection();
+    xcb_window_t windowAId = 0;
+    X11Window *windowA = createWindow(c.get(), QRect(0, 0, 100, 100), [&](xcb_window_t windowId) {
+        windowAId = windowId;
+        quint32 value = 1;
+        xcb_change_window_attributes(c.get(), windowId, XCB_CW_OVERRIDE_REDIRECT, &value);
+    });
+    X11Window *windowB = createWindow(c.get(), QRect(0, 0, 100, 100), [&](xcb_window_t windowId) {
+        quint32 value = 1;
+        xcb_change_window_attributes(c.get(), windowId, XCB_CW_OVERRIDE_REDIRECT, &value);
+
+        // restack before showing
+        uint32_t values[] = {windowAId, XCB_STACK_MODE_ABOVE};
+        xcb_configure_window(c.get(), windowId,
+                             XCB_CONFIG_WINDOW_SIBLING | XCB_CONFIG_WINDOW_STACK_MODE,
+                             values);
+    });
+    QVERIFY(workspace()->windows().count() == 2);
+    QVERIFY(workspace()->stackingOrder().indexOf(windowA) == 0);
+    QVERIFY(workspace()->stackingOrder().indexOf(windowB) == 1);
+}
+
+void X11WindowTest::testOverrideRedirectStackingBelow()
+{
+    Test::XcbConnectionPtr c = Test::createX11Connection();
+    xcb_window_t windowAId = 0;
+    X11Window *windowA = createWindow(c.get(), QRect(0, 0, 100, 100), [&](xcb_window_t windowId) {
+        windowAId = windowId;
+        quint32 value = 1;
+        xcb_change_window_attributes(c.get(), windowId, XCB_CW_OVERRIDE_REDIRECT, &value);
+    });
+    X11Window *windowB = createWindow(c.get(), QRect(0, 0, 100, 100), [&](xcb_window_t windowId) {
+        quint32 value = 1;
+        xcb_change_window_attributes(c.get(), windowId, XCB_CW_OVERRIDE_REDIRECT, &value);
+
+        // restack before showing
+        uint32_t values[] = {windowAId, XCB_STACK_MODE_BELOW};
+        xcb_configure_window(c.get(), windowId,
+                             XCB_CONFIG_WINDOW_SIBLING | XCB_CONFIG_WINDOW_STACK_MODE,
+                             values);
+    });
+    QVERIFY(workspace()->windows().count() == 2);
+    QVERIFY(workspace()->stackingOrder().indexOf(windowA) == 1);
+    QVERIFY(workspace()->stackingOrder().indexOf(windowB) == 0);
+}
+
 WAYLANDTEST_MAIN(X11WindowTest)
 #include "x11_window_test.moc"
diff --git a/src/events.cpp b/src/events.cpp
index 49e6925e72..6f73c71263 100644
--- a/src/events.cpp
+++ b/src/events.cpp
@@ -273,7 +273,9 @@ bool Workspace::workspaceEvent(xcb_generic_event_t *e)
     case XCB_CONFIGURE_NOTIFY: {
         const auto configureNotifyEvent = reinterpret_cast<xcb_configure_notify_event_t *>(e);
         if (configureNotifyEvent->override_redirect && configureNotifyEvent->event == kwinApp()->x11RootWindow()) {
-            updateXStackingOrder();
+            if (updateXStackingOrder()) {
+                updateStackingOrder();
+            }
         }
         break;
     }
diff --git a/src/layers.cpp b/src/layers.cpp
index a5e1b22f7a..3f7ad39a1e 100644
--- a/src/layers.cpp
+++ b/src/layers.cpp
@@ -719,12 +719,12 @@ QList<Window *> Workspace::unconstrainedStackingOrder() const
 }
 
 #if KWIN_BUILD_X11
-void Workspace::updateXStackingOrder()
+bool Workspace::updateXStackingOrder()
 {
     // we use our stacking order for managed windows, but X's for override-redirect windows
     Xcb::Tree tree(kwinApp()->x11RootWindow());
     if (tree.isNull()) {
-        return;
+        return false;
     }
     xcb_window_t *windows = tree.children();
 
@@ -738,10 +738,7 @@ void Workspace::updateXStackingOrder()
             changed = true;
         }
     }
-
-    if (changed) {
-        updateStackingOrder();
-    }
+    return changed;
 }
 #endif
 
diff --git a/src/workspace.cpp b/src/workspace.cpp
index 9e6a0550cd..f23b8d49c7 100644
--- a/src/workspace.cpp
+++ b/src/workspace.cpp
@@ -808,6 +808,7 @@ void Workspace::addUnmanaged(X11Window *window)
     Q_ASSERT(!m_windows.contains(window));
     m_windows.append(window);
     addToStack(window);
+    updateXStackingOrder();
     updateStackingOrder(true);
     if (window->isOutline() && m_moveResizeWindow) {
         constrain(window, m_moveResizeWindow);
diff --git a/src/workspace.h b/src/workspace.h
index ea1f4f2b91..159fc92d4f 100644
--- a/src/workspace.h
+++ b/src/workspace.h
@@ -625,7 +625,7 @@ private:
     void addX11Window(X11Window *c);
     X11Window *createUnmanaged(xcb_window_t windowId);
     void addUnmanaged(X11Window *c);
-    void updateXStackingOrder();
+    bool updateXStackingOrder();
 #endif
     void setupWindowConnections(Window *window);
 
-- 
2.47.1

