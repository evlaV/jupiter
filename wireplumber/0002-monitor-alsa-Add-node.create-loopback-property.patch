From cc037da20324d0c6766cd4c1bd20622bbc2b4b41 Mon Sep 17 00:00:00 2001
From: Julian Bouzas <julian.bouzas@collabora.com>
Date: Thu, 15 Aug 2024 14:03:14 -0400
Subject: [PATCH 2/4] monitor: alsa: Add 'node.create-loopback' property

If enabled, the monitor will create a loopback filter for each ALSA
node.
---
 src/config/wireplumber.conf   |  2 +-
 src/scripts/monitors/alsa.lua | 83 +++++++++++++++++++++++++++++++++++
 2 files changed, 84 insertions(+), 1 deletion(-)

diff --git a/src/config/wireplumber.conf b/src/config/wireplumber.conf
index dcbb67a7..03dd7fe4 100644
--- a/src/config/wireplumber.conf
+++ b/src/config/wireplumber.conf
@@ -364,7 +364,7 @@ wireplumber.components = [
   {
     name = monitors/alsa.lua, type = script/lua
     provides = monitor.alsa
-    requires = [ support.export-core, pw.client-device ]
+    requires = [ support.export-core, pw.client-device, pw.node-factory.adapter ]
     wants = [ monitor.alsa.reserve-device ]
   }
   {
diff --git a/src/scripts/monitors/alsa.lua b/src/scripts/monitors/alsa.lua
index 06b40f20..65b1b298 100644
--- a/src/scripts/monitors/alsa.lua
+++ b/src/scripts/monitors/alsa.lua
@@ -5,6 +5,7 @@
 --
 -- SPDX-License-Identifier: MIT
 
+LOOPBACK_ID_OFFSET = 128
 SPLIT_PCM_PARENT_OFFSET = 256
 SPLIT_PCM_OFFSET = 512
 
@@ -178,6 +179,79 @@ split_nodes_om:connect ("object-added", function(_, node)
     end
 end)
 
+function CreateLoopback (properties)
+  local name = properties ["node.name"]
+  local desc = properties ["node.description"]
+  local device_media_class = properties ["media.class"]
+  local dev_id = properties ["device.id"]
+  local channels = properties ["audio.channels"]
+  local position = properties ["audio.position"]
+  local pri_driver = properties ["priority.driver"]
+  local pri_session = properties ["priority.session"]
+  local cpd = properties ["card.profile.device"]
+  local stream_media_class = nil
+  local stream_props = nil
+  local device_props = nil
+  local args = nil
+
+  -- Set stream media class
+  if device_media_class == "Audio/Sink" then
+    stream_media_class = "Stream/Output/Audio"
+  elseif device_media_class == "Audio/Source" then
+    stream_media_class = "Stream/Input/Audio"
+  else
+    return nil
+  end
+
+  -- Set stream props
+  stream_props = Json.Object {
+    ["node.name"] = string.format ("alsa_loopback_stream.%s", name),
+    ["node.description"] =
+        string.format ("ALSA internal stream for %s", desc),
+    ["media.class"] = stream_media_class,
+    ["audio.channels"] = channels,
+    ["audio.position"] = position,
+    ["alsa.loopback"] = true,
+    ["stream.dont-remix"] = true,
+    ["node.passive"] = true,
+    ["node.dont-fallback"] = true,
+    ["node.linger"] = true,
+    ["target.object"] = name
+  }
+
+  -- Set device props
+  device_props = Json.Object {
+    ["node.name"] = string.format ("alsa_loopback_device.%s", name),
+    ["node.description"] = desc,
+    ["media.class"] = device_media_class,
+    ["audio.channels"] = channels,
+    ["audio.position"] = position,
+    ["alsa.loopback"] = true,
+    ["device.id"] = dev_id,
+    ["card.profile.device"] = cpd,
+    ["priority.driver"] = tonumber(pri_driver) + 1,
+    ["priority.session"] = tonumber(pri_session) + 1
+  }
+
+  -- Set args
+  if device_media_class == "Audio/Sink" then
+    args = Json.Object {
+      ["playback.props"] = stream_props,
+      ["capture.props"] = device_props
+    }
+  elseif device_media_class == "Audio/Source" then
+    args = Json.Object {
+      ["playback.props"] = device_props,
+      ["capture.props"] = stream_props
+    }
+  else
+    return nil
+  end
+
+  -- Load loopback
+  return LocalModule("libpipewire-module-loopback", args:get_data(), {})
+end
+
 function createNode(parent, id, obj_type, factory, properties)
   local dev_props = parent.properties
   local parent_id = tonumber(dev_props["spa.object.id"])
@@ -360,12 +434,21 @@ function createNode(parent, id, obj_type, factory, properties)
       end
   end)
   parent:store_managed_object(id, node)
+
+  -- create the loopback node if requested
+  if cutils.parseBool (properties ["node.create-loopback"]) then
+    local loopback = CreateLoopback (properties)
+    parent:store_managed_object(LOOPBACK_ID_OFFSET + id, loopback)
+  end
 end
 
 function removeNode(parent, id)
   local parent_id = tonumber(parent.properties["spa.object.id"])
   local ids = {id, SPLIT_PCM_PARENT_OFFSET + id, SPLIT_PCM_OFFSET + id}
 
+  -- remove loopback if any
+  parent:store_managed_object(LOOPBACK_ID_OFFSET + id, nil)
+
   for _, j in pairs(ids) do
     local node_name = id_name_table[parent_id][j]
 
-- 
2.50.1

